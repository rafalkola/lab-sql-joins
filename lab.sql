-- List the number of films per category.

SELECT c.name, COUNT(*) 
FROM category c
INNER JOIN film_category fc
ON c.category_id = fc.category_id
GROUP BY c.name;

-- Retrieve the store ID, city, and country for each store.
SELECT * FROM store;	
SELECT * FROM address;
SELECT * FROM city;
SELECT * FROM country;


SELECT 
    store_id as store, address, city, country
FROM
    country ct
        INNER JOIN
    (SELECT 
        c.city, c.country_id, sa.store_id, sa.address_id, sa.address
    FROM
        city c
    INNER JOIN (SELECT 
        s.store_id, s.address_id, a.address, a.city_id
    FROM
        store s
    INNER JOIN address a ON s.address_id = a.address_id) sa ON c.city_id = sa.city_id) csa ON ct.country_id = csa.country_id;
    
-- Calculate the total revenue generated by each store in dollars.
SELECT * FROM payment;
SELECT * FROM staff;
SELECT * FROM store;

CREATE VIEW total_revenue AS
SELECT st.store_id, ps.amount
FROM store st
INNER JOIN
(
SELECT p.amount, s.staff_id, s.store_id
FROM payment p
INNER JOIN
staff s
ON p.staff_id = s.staff_id) ps
ON st.store_id = ps.store_id;

SELECT store_id, SUM(amount)
FROM total_revenue
GROUP BY store_id;

-- Determine the average running time of films for each category.
SELECT * FROM film;
SELECT * FROM film_category;
SELECT * FROM category;

CREATE VIEW average_running_time_for_each_category AS
SELECT name, AVG(length) AS avg_length
FROM category c
INNER JOIN(
SELECT f.film_id, f.length, fc.category_id
FROM film f
INNER JOIN film_category fc
ON f.film_id = fc.film_id) ffc
ON c.category_id = ffc.category_id
GROUP BY name
ORDER BY avg_length DESC;

-- Identify the film categories with the longest average running time.
SELECT *
FROM average_running_time_for_each_category
ORDER BY avg_length DESC
LIMIT 5;

-- Display the top 10 most frequently rented movies in descending order.
SELECT * FROM film;
SELECT * FROM inventory;
SELECT * FROM rental;

CREATE VIEW top_10_rented_movies AS
SELECT fi.film_id, fi.title, r.inventory_id, r.rental_id
FROM rental r
INNER JOIN(
SELECT f.film_id, f.title, i.inventory_id
FROM film f
INNER JOIN inventory i
ON f.film_id = i.film_id) fi
ON r.inventory_id = fi.inventory_id;

SELECT title, COUNT(*) AS amount_of_rentals 
FROM top_10_rented_movies
GROUP BY title
ORDER BY amount_of_rentals DESC
LIMIT 10;

-- Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT * FROM inventory;

SELECT f.title, i.store_id
FROM film f
INNER JOIN inventory i
ON f.film_id = i.film_id
WHERE title = 'Academy Dinosaur';

-- Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL

SELECT DISTINCT(f.title),
CASE
	WHEN i.inventory_id IS NULL THEN 'not available'
    ELSE 'available'
END AS availability
FROM film f
LEFT JOIN inventory i
ON f.film_id = i.film_id;